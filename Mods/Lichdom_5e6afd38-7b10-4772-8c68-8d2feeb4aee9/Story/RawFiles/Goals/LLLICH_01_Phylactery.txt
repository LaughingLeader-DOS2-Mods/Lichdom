Version 1
SubGoalCombiner SGC_AND
INITSECTION
LLLICH_Phylactery_InitSettings();
KBSECTION

PROC
LLLICH_Phylactery_InitSettings()
THEN
SysClear("DB_LLLICH_Phylactery_DamageOnDeath", 2);
DB_LLLICH_Phylactery_DamageOnDeath(0, -1);
DB_LLLICH_Phylactery_DamageOnDeath(1, -2); // Hardcore mode = Tactician
/*
LOOT_LLLICH_Phylactery_Amulet_A_5d0c0bef-9071-4328-b72c-b58086b0f68d
LOOT_LLLICH_Phylactery_Amulet_A_2_38facf35-de7b-4eb0-baef-48f92c61166a
LOOT_LLLICH_Phylactery_Amulet_A_3_397a89d5-8fc9-4af2-a25a-dc9e998c223c
LOOT_LLLICH_Phylactery_Amulet_A_Broken_43577ebe-fec3-4f09-ae13-373aa10e123b
LOOT_LLLICH_Phylactery_Amulet_A_Broken_2_2d720b82-a762-441f-9e51-7b8ada324239
LOOT_LLLICH_Phylactery_Amulet_A_Broken_3_fa2727e9-10f9-44eb-a173-1cc94189981f
LOOT_LLLICH_Phylactery_Ring_A_cd0b735f-6c57-43b5-8d12-131b725dda48
LOOT_LLLICH_Phylactery_Ring_A_2_8f9126d5-ecc5-47b2-b9d8-f5d61f84f6fa
LOOT_LLLICH_Phylactery_Ring_A_3_845cdd4d-0ad9-49ac-84d5-b4dba325e13c
LOOT_LLLICH_Phylactery_Ring_A_Broken_244e99ff-5fc9-4fcf-aa61-ff37959b90fd
LOOT_LLLICH_Phylactery_Ring_A_Broken_2_594756d0-b438-4165-aab3-608ac8bf7df7
LOOT_LLLICH_Phylactery_Ring_A_Broken_3_719aeae2-9eba-4cfe-a51b-6808ac2d4279
LOOT_LLLICH_Phylactery_Smallbox_A_73c01ec2-7894-4d19-b12f-991650263332
LOOT_LLLICH_Phylactery_Smallbox_A_2_8d3d1223-48c5-481b-ac55-e407f71fb749
LOOT_LLLICH_Phylactery_Smallbox_A_3_2846990e-f2e4-48d8-8570-4854632cb557
LOOT_LLLICH_Phylactery_Smallbox_A_Broken_ea462acf-cfc8-4707-85e9-f647215b4893
LOOT_LLLICH_Phylactery_Smallbox_A_Broken_2_a069aefa-a981-4f79-8ab7-1489ebfbc288
LOOT_LLLICH_Phylactery_Smallbox_A_Broken_3_d2068826-c847-440b-ba41-cb822e8fcd00
*/
//DB_LLLICH_Phylactery_Templates(_Active, _Level, _Tag, _Template)
DB_LLLICH_Phylactery_Templates(1, 1, "LLLICH_Phylactery_Amulet_A", "LOOT_LLLICH_Phylactery_Amulet_A_5d0c0bef-9071-4328-b72c-b58086b0f68d");
DB_LLLICH_Phylactery_Templates(1, 2, "LLLICH_Phylactery_Amulet_A", "LOOT_LLLICH_Phylactery_Amulet_A_2_38facf35-de7b-4eb0-baef-48f92c61166a");
DB_LLLICH_Phylactery_Templates(1, 3, "LLLICH_Phylactery_Amulet_A", "LOOT_LLLICH_Phylactery_Amulet_A_3_397a89d5-8fc9-4af2-a25a-dc9e998c223c");
DB_LLLICH_Phylactery_Templates(0, 1, "LLLICH_Phylactery_Amulet_A", "LOOT_LLLICH_Phylactery_Amulet_A_Broken_43577ebe-fec3-4f09-ae13-373aa10e123b");
DB_LLLICH_Phylactery_Templates(0, 2, "LLLICH_Phylactery_Amulet_A", "LOOT_LLLICH_Phylactery_Amulet_A_Broken_2_2d720b82-a762-441f-9e51-7b8ada324239");
DB_LLLICH_Phylactery_Templates(0, 3, "LLLICH_Phylactery_Amulet_A", "LOOT_LLLICH_Phylactery_Amulet_A_Broken_3_fa2727e9-10f9-44eb-a173-1cc94189981f");
DB_LLLICH_Phylactery_Templates(1, 1, "LLLICH_Phylactery_Ring_A", "LOOT_LLLICH_Phylactery_Ring_A_cd0b735f-6c57-43b5-8d12-131b725dda48");
DB_LLLICH_Phylactery_Templates(1, 2, "LLLICH_Phylactery_Ring_A", "LOOT_LLLICH_Phylactery_Ring_A_2_8f9126d5-ecc5-47b2-b9d8-f5d61f84f6fa");
DB_LLLICH_Phylactery_Templates(1, 3, "LLLICH_Phylactery_Ring_A", "LOOT_LLLICH_Phylactery_Ring_A_3_845cdd4d-0ad9-49ac-84d5-b4dba325e13c");
DB_LLLICH_Phylactery_Templates(0, 1, "LLLICH_Phylactery_Ring_A", "LOOT_LLLICH_Phylactery_Ring_A_Broken_244e99ff-5fc9-4fcf-aa61-ff37959b90fd");
DB_LLLICH_Phylactery_Templates(0, 2, "LLLICH_Phylactery_Ring_A", "LOOT_LLLICH_Phylactery_Ring_A_Broken_2_594756d0-b438-4165-aab3-608ac8bf7df7");
DB_LLLICH_Phylactery_Templates(0, 3, "LLLICH_Phylactery_Ring_A", "LOOT_LLLICH_Phylactery_Ring_A_Broken_3_719aeae2-9eba-4cfe-a51b-6808ac2d4279");
DB_LLLICH_Phylactery_Templates(1, 1, "LLLICH_Phylactery_Smallbox_A", "LOOT_LLLICH_Phylactery_Smallbox_A_73c01ec2-7894-4d19-b12f-991650263332");
DB_LLLICH_Phylactery_Templates(1, 2, "LLLICH_Phylactery_Smallbox_A", "LOOT_LLLICH_Phylactery_Smallbox_A_2_8d3d1223-48c5-481b-ac55-e407f71fb749");
DB_LLLICH_Phylactery_Templates(1, 3, "LLLICH_Phylactery_Smallbox_A", "LOOT_LLLICH_Phylactery_Smallbox_A_3_2846990e-f2e4-48d8-8570-4854632cb557");
DB_LLLICH_Phylactery_Templates(0, 1, "LLLICH_Phylactery_Smallbox_A", "LOOT_LLLICH_Phylactery_Smallbox_A_Broken_ea462acf-cfc8-4707-85e9-f647215b4893");
DB_LLLICH_Phylactery_Templates(0, 2, "LLLICH_Phylactery_Smallbox_A", "LOOT_LLLICH_Phylactery_Smallbox_A_Broken_2_a069aefa-a981-4f79-8ab7-1489ebfbc288");
DB_LLLICH_Phylactery_Templates(0, 3, "LLLICH_Phylactery_Smallbox_A", "LOOT_LLLICH_Phylactery_Smallbox_A_Broken_3_d2068826-c847-440b-ba41-cb822e8fcd00");
//REGION UPDATES
//No phylactery entry in the DB, but is a lich with the status
IF
TimerFinished("LLLICH_Timers_Debug_RunPhylacterySanityCheck")
AND
DB_IsPlayer(_Lich)
AND
NOT DB_LLLICH_Phylactery_Active(_Lich, _, _)
AND
IsTagged(_Lich, "LLLICH_Lich", 1)
AND
HasActiveStatus(_Lich, "LLLICH_PHYLACTERY_ACTIVE", 1)
THEN
LeaderLog_Log("DEBUG", "[Lichdom:Phylactery:Debug:StatsReload_ReplacePhylacteries_SanityCheck] No phylactery found or stored, despite having the active status. Refunding soul extractor and starting inventory iterator.");
InventoryLaunchTagIterator(_Lich, "LLLICH_Phylactery", "", "LLLICH_Debug_FoundTaggedPhylactery_Remove", "");
LLLich_Phylactery_ClearPhylacteryVariables(_Lich);
ItemTemplateAddTo("PUZ_LLLICH_PhylacteryCreator_A_71cb1886-a2fc-4f3a-acd6-886485fa9bee", _Lich, 1, 1);

IF
StoryEvent((ITEMGUID)_Phylactery, "LLLICH_Debug_FoundTaggedPhylactery_Remove")
AND
NOT DB_LLLICH_Phylactery_Active(_, _Phylactery, _)
THEN
ItemRemove(_Phylactery);
LeaderLog_Log("DEBUG", "[Lichdom:Phylactery:Debug] Deleted tagged Phylactery item not bound to a Lich.");

IF
TimerFinished("LLLICH_Timers_Debug_RunPhylacterySanityCheck")
THEN
LLLICH_Phylactery_Debug_ErrorCheck();

PROC
LLLICH_Phylactery_Debug_ErrorCheck()
AND
DB_IsPlayer(_Player)
AND
IsTagged(_Player, "LLLICH_Lich", 1)
AND
HasActiveStatus(_Player, "LLLICH_PHYLACTERY_ACTIVE", 0)
THEN
CharacterSetImmortal(_Player, 0);
LeaderLog_Log("DEBUG", "[Lichdom:Phylactery:Debug:ErrorCheck] Phylactery status missing. Removing immortality.");

//Power changed to Charges
PROC
LLLICH_Phylactery_Debug_TransformPhylactery()
AND
DB_LLLICH_Phylactery_Active(_Lich, _OldPhylactery, _Active)
AND
ItemIsInInventory(_OldPhylactery, 0)
AND
GetTemplate(_OldPhylactery, _Template)
THEN
Transform(_OldPhylactery, _Template, 0, 0, 1);
LeaderLog_Log("DEBUG", "[Lichdom:Phylactery:Debug:TransformPhylactery] Transformed Phylactery to [",_Template,"].");

//Phylacteries equipped or in an inventory may lose their stored GUIDSTRING when the stats change
PROC
LLLICH_Phylactery_Debug_StatsReload_ReplacePhylacteries_Start()
AND
DB_LLLICH_Phylactery_Active(_Lich, _OldPhylactery, _Active)
AND
ObjectExists(_OldPhylactery, _Exists)
AND
ItemIsInInventory(_OldPhylactery, _InInventory)
THEN
LLLICH_Phylactery_Debug_StatsReload_ReplacePhylactery(_Lich, _OldPhylactery, _Exists, _InInventory, _Active);

//In an inventory
PROC
LLLICH_Phylactery_Debug_StatsReload_ReplacePhylactery((CHARACTERGUID)_Lich, (ITEMGUID)_OldPhylactery, 1, 1, (INTEGER)_Active)
AND
NOT DB_LLLICH_Debug_ReplacedPhylactery(_Lich)
AND
GetInventoryOwner(_OldPhylactery, _Inventory)
AND
GetTemplate(_OldPhylactery, _Template)
AND
GetPosition(_Lich, _x, _y, _z)
AND
CreateItemTemplateAtPosition(_Template, _x, _y, _z, _NewPhylactery)
THEN
NOT DB_LLLICH_Phylactery_Active(_Lich, _OldPhylactery, _Active);
DB_LLLICH_Phylactery_Active(_Lich, _NewPhylactery, _Active);
ItemRemove(_OldPhylactery);
ItemToInventory(_NewPhylactery, _Inventory);
DB_LLLICH_Debug_ReplacedPhylactery(_Lich);
LeaderLog_Log("DEBUG", "[Lichdom:Phylactery:Debug:StatsReload:ReplacePhylactery] Phylactery is in an inventory. Creating new template, removing old, and sending it to the Lich.");

//Not in an inventory
PROC
LLLICH_Phylactery_Debug_StatsReload_ReplacePhylactery((CHARACTERGUID)_Lich, (ITEMGUID)_OldPhylactery, 1, 0, (INTEGER)_Active)
AND
NOT DB_LLLICH_Debug_ReplacedPhylactery(_Lich)
AND
GetPosition(_OldPhylactery, _x, _y, _z)
AND
GetTemplate(_OldPhylactery, _Template)
AND
CreateItemTemplateAtPosition(_Template, _x, _y, _z, _NewPhylactery)
THEN
NOT DB_LLLICH_Phylactery_Active(_Lich, _OldPhylactery, _Active);
DB_LLLICH_Phylactery_Active(_Lich, _NewPhylactery, _Active);
ItemRemove(_OldPhylactery);
DB_LLLICH_Debug_ReplacedPhylactery(_Lich);
LeaderLog_Log("DEBUG", "[Lichdom:Phylactery:Debug:StatsReload:ReplacePhylactery] Phylactery is in the world. Creating new template, removing old, and placing it as the same spot.");

//Doesn't exist
PROC
LLLICH_Phylactery_Debug_StatsReload_ReplacePhylactery((CHARACTERGUID)_Lich, (ITEMGUID)_OldPhylactery, 0, (INTEGER)_InInventory, (INTEGER)_Active)
AND
DB_LLLICH_Debug_ReplacedPhylactery(_Lich)
AND
NOT DB_LLLICH_Debug_ReplacedPhylactery(_Lich)
AND
LLLICH_Phylactery_Debug_StatsReload_QRY_CreateNew(_Lich)
AND
DB_LLLICH_Debug_NewPhylactery(_Lich, _NewPhylactery)
THEN
NOT DB_LLLICH_Debug_NewPhylactery(_Lich, _NewPhylactery);
NOT DB_LLLICH_Phylactery_Active(_Lich, _OldPhylactery, _Active);
DB_LLLICH_Phylactery_Active(_Lich, _NewPhylactery, _Active);
ItemToInventory(_NewPhylactery, _Lich, 1, 1, 1);
DB_LLLICH_Debug_ReplacedPhylactery(_Lich);
LeaderLog_Log("DEBUG", "[Lichdom:Phylactery:Debug:StatsReload:ReplacePhylactery] Phylactery does not exist. Creating new template and sending it to the Lich.");

QRY
LLLICH_Phylactery_Debug_StatsReload_QRY_CreateNew((CHARACTERGUID)_Lich)
AND
NOT DB_LLLICH_Debug_NewPhylactery(_Lich, _)
AND
ObjectGetFlag(_Lich, "LLLICH_Phylactery_Amulet", 1)
AND
GetPosition(_Lich, _x, _y, _z)
AND
CreateItemTemplateAtPosition("LOOT_LLLICH_Phylactery_Amulet_A_5d0c0bef-9071-4328-b72c-b58086b0f68d", _x, _y, _z, _Phylactery)
THEN
DB_LLLICH_Debug_NewPhylactery(_Lich, _Phylactery);

QRY
LLLICH_Phylactery_Debug_StatsReload_QRY_CreateNew((CHARACTERGUID)_Lich)
AND
NOT DB_LLLICH_Debug_NewPhylactery(_Lich, _)
AND
ObjectGetFlag(_Lich, "LLLICH_Phylactery_Ring", 1)
AND
GetPosition(_Lich, _x, _y, _z)
AND
CreateItemTemplateAtPosition("LOOT_LLLICH_Phylactery_Ring_A_cd0b735f-6c57-43b5-8d12-131b725dda48", _x, _y, _z, _Phylactery)
THEN
DB_LLLICH_Debug_NewPhylactery(_Lich, _Phylactery);

//Default
QRY
LLLICH_Phylactery_Debug_StatsReload_QRY_CreateNew((CHARACTERGUID)_Lich)
AND
NOT DB_LLLICH_Debug_NewPhylactery(_Lich, _)
AND
GetPosition(_Lich, _x, _y, _z)
AND
CreateItemTemplateAtPosition("LOOT_LLLICH_Phylactery_Smallbox_A_73c01ec2-7894-4d19-b12f-991650263332", _x, _y, _z, _Phylactery)
THEN
DB_LLLICH_Debug_NewPhylactery(_Lich, _Phylactery);

//Success
PROC
LLLICH_Phylactery_Debug_StatsReload_ReplacePhylactery((CHARACTERGUID)_Lich, (ITEMGUID)_OldPhylactery, (INTEGER)_Exists, (INTEGER)_InInventory, (INTEGER)_Active)
AND
DB_LLLICH_Debug_ReplacedPhylactery(_Lich)
AND
DB_LLLICH_Phylactery_Active(_Lich, _NewPhylactery, _Active)
THEN
NOT DB_LLLICH_Debug_ReplacedPhylactery(_Lich);
ObjectSetFlag(_Lich, "LLLICH_PhylacteryActive");
LLLICH_Main_AddLichSkills(_Lich);
ItemSetOwner(_NewPhylactery, _Lich);
SetVarObject(_Lich, "LLLICH_Phylactery", _NewPhylactery);
SetVarObject(_NewPhylactery, "LLLICH_Phylactory_Owner", _Lich);
LLLICH_Phylactery_Debug_StatsReload_AdjustActive(_Lich, _NewPhylactery, _Active);
ItemAddCharges(_NewPhylactery, 2);
OpenMessageBox(_Lich, "LLLICH_Notifications_Phylactery_Debug_Replaced");
LeaderLog_LogInt("DEBUG", "[Lichdom:Phylactery:Debug:StatsReload:ReplacePhylactery] Phylactery successfully replaced. Updated variables. Phylactery Active:[",_Active,"].");

PROC
LLLICH_Phylactery_Debug_StatsReload_AdjustActive((CHARACTERGUID)_Lich, (ITEMGUID)_NewPhylactery, 0)
AND
IsTagged(_NewPhylactery, "LLLICH_Phylactery_Broken", 0)
THEN
NOT DB_LLLICH_Phylactery_Active(_Lich, _NewPhylactery, 0);
DB_LLLICH_Phylactery_Active(_Lich, _NewPhylactery, 1);

PROC
LLLICH_Phylactery_Debug_StatsReload_ReplacePhylactery((CHARACTERGUID)_Lich, (ITEMGUID)_OldPhylactery, (INTEGER)_Exists, (INTEGER)_InInventory, (INTEGER)_Active)
AND
DB_LLLICH_Debug_ReplacedPhylactery(_Lich)
AND
NOT DB_LLLICH_Phylactery_Active(_Lich, _, _)
THEN
NOT DB_LLLICH_Debug_ReplacedPhylactery(_Lich);
LeaderLog_Log("DEBUG", "[Lichdom:Phylactery:Debug:StatsReload:ReplacePhylactery] [ERROR] No active entry for new Phylactery. What happened?");
//END_REGION

//REGION QUERIES
QRY
LLLICH_Phylactery_QRY_CanFeedSouls((CHARACTERGUID)_Lich)
AND
DB_LLLICH_Phylactery_Active(_Lich, _Phylactery, _Active)
AND
ItemGetCharges(_Phylactery, _Power)
AND
ItemGetMaxCharges(_Phylactery, _Max)
AND
_Power < _Max
THEN
DB_NOOP(1);

QRY
LLLICH_Phylactery_QRY_CanFeedSouls((CHARACTERGUID)_Lich, (ITEMGUID)_Phylactery)
AND
ObjectExists(_Phylactery, 1)
AND
ItemGetCharges(_Phylactery, _Power)
AND
ItemGetMaxCharges(_Phylactery, _Max)
AND
_Power < _Max
THEN
DB_NOOP(1);

QRY
LLLICH_Phylactery_QRY_PhylacteryIsBroken((CHARACTERGUID)_Lich, (ITEMGUID)_Phylactery, (INTEGER)_Power)
AND
_Power <= 0
THEN
LeaderLog_Log("DEBUG", "[Lichdom:Phylactery:QRY:PhylacteryIsBroken] The Phylactery was broken!");
LLLICH_Phylactery_Break(_Phylactery);

QRY
LLLICH_Phylactery_QRY_PhylacteryIsInWorld((ITEMGUID)_Phylactery)
AND
ObjectExists(_Phylactery, 1)
AND
ItemIsInInventory(_Phylactery, 0)
AND
ItemIsDestroyed(_Phylactery, 0)
THEN
DB_NOOP(1);

QRY
LLLICH_Phylactery_QRY_CheckSoulLevel((CHARACTERGUID)_Lich, (ITEMGUID)_Phylactery)
THEN
LLLICH_Phylactery_InitSoulLevel(_Lich);

PROC
LLLICH_Phylactery_InitSoulLevel((CHARACTERGUID)_Lich)
AND
NOT GetVarInteger(_Lich, "LLLICH_SoulLevel", _)
THEN
SetVarInteger(_Lich, "LLLICH_SoulLevel", 1);

PROC
LLLICH_Phylactery_InitSoulLevel((CHARACTERGUID)_Lich)
AND
GetVarInteger(_Lich, "LLLICH_SoulLevel", _Level)
AND
_Level < 1
THEN
SetVarInteger(_Lich, "LLLICH_SoulLevel", 1);
//END_REGION

//REGION USING_SOUL_EXTRACTOR
PROC
ProcBlockUseOfItem(_Lich, _Extractor)
AND
GetTemplate(_Extractor, "PUZ_LLLICH_PhylacteryCreator_A_71cb1886-a2fc-4f3a-acd6-886485fa9bee")
THEN
LLLICH_Phylactery_Internal_OnPlayerUsingExtractor(_Lich, _Extractor);

PROC
LLLICH_Phylactery_Internal_OnPlayerUsingExtractor((CHARACTERGUID)_Lich, (ITEMGUID)_Extractor)
AND
NOT QRY_SpeakerIsAvailable(_Lich)
THEN
DB_CustomUseItemResponse(_Lich, _Extractor, 0);
ShowNotification(_Lich, "LLLICH_Notifications_Phylactery_SoulExtractorBlocked");

PROC
LLLICH_Phylactery_Internal_OnPlayerUsingExtractor((CHARACTERGUID)_Lich, (ITEMGUID)_Extractor)
AND
NOT DB_CustomUseItemResponse(_Lich, _Extractor, 0)
AND
DB_LLLICH_Phylactery_Temp_UsingExtractor(_OtherLich, _Extractor) // Someone else is using it
AND
_OtherLich != _Lich
THEN
DB_CustomUseItemResponse(_Lich, _Extractor, 0);
ShowNotification(_Lich, "LLLICH_Notifications_Phylactery_SoulExtractorInUse");

PROC
LLLICH_Phylactery_Internal_OnPlayerUsingExtractor((CHARACTERGUID)_Lich, (ITEMGUID)_Extractor)
AND
NOT DB_CustomUseItemResponse(_Lich, _Extractor, 0)
THEN
DB_LLLICH_Phylactery_Temp_UsingExtractor(_Lich, _Extractor);

PROC
LLLICH_Phylactery_Internal_OnPlayerUsingExtractor((CHARACTERGUID)_Lich, (ITEMGUID)_Extractor)
AND
DB_LLLICH_Phylactery_Temp_UsingExtractor(_Lich, _Extractor)
AND
ItemIsInInventory(_Extractor, 0)
AND
DB_CurrentLevel(_Level)
THEN
PROC_LoopEffect("RS3_FX_Skills_Polymorph_Soul_TurnInto_StatusEffect_Root_01", _Extractor, "LLLICH.FX.SoulExtractorActive.Overlay", _Level, "");
PROC_LoopBeamEffect("LLLICH_FX_Status_NearPhylactory_Beam_01", _Lich, _Extractor, "Dummy_BodyFX", "", "LLLICH.FX.SoulExtractorActive.Beam1",  _Level);
//PROC_LoopBeamEffect("LLLICH_FX_Status_NearPhylactory_Beam_01", _Lich, _Extractor, "Dummy_R_HandFX", "", "LLLICH.FX.SoulExtractorActive.Beam2",  _Level);

PROC
LLLICH_Phylactery_OnPhylacteryCreated((CHARACTERGUID)_Lich, (ITEMGUID)_Phylactery)
AND
DB_LLLICH_Phylactery_Temp_UsingExtractor(_Lich, _Extractor)
THEN
LLLICH_Phylactery_Internal_RemoveExtractor(_Lich, _Extractor);
ItemDestroy(_Extractor);

IF
DialogEnded("LLLICH_CreatePhylactery", _Instance)
AND
DialogGetInvolvedPlayer(_Instance, 1, (CHARACTERGUID)_Lich)
AND
DB_LLLICH_Phylactery_Temp_UsingExtractor(_Lich, _Extractor)
THEN
LLLICH_Phylactery_Internal_RemoveExtractor(_Lich, _Extractor);

IF
DialogRequestFailed("LLLICH_CreatePhylactery", _Instance)
AND
DialogGetInvolvedPlayer(_Instance, 1, (CHARACTERGUID)_Lich)
AND
DB_LLLICH_Phylactery_Temp_UsingExtractor(_Lich, _Extractor)
THEN
LLLICH_Phylactery_Internal_RemoveExtractor(_Lich, _Extractor);

PROC
LLLICH_Phylactery_Internal_RemoveExtractor((CHARACTERGUID)_Lich, (ITEMGUID)_Extractor)
THEN
NOT DB_LLLICH_Phylactery_Temp_UsingExtractor(_Lich, _Extractor);
PROC_StopLoopBeamEffect(_Lich, "LLLICH.FX.SoulExtractorActive.Beam1");
PROC_StopLoopEffect(_Lich, "LLLICH.FX.SoulExtractorActive.Overlay");
PROC_StopLoopEffect(_Extractor, "LLLICH.FX.SoulExtractorActive.Overlay");
//END_REGION

//REGION CREATION
IF
CharacterStatusRemoved(_Lich, "LLLICH_CREATE_PHYLACTORY", _)
AND
QRY_SpeakerIsAvailable(_Lich)
AND
ObjectGetFlag(_Lich, "LLLICH_PhylacteryActive", _PhylactoryActive)
THEN
LLLICH_Phylactery_StartPhylactoryCreationDialog(_Lich, _PhylactoryActive);

PROC
LLLICH_Phylactery_StartPhylactoryCreationDialog((CHARACTERGUID)_Lich, 0)
THEN
ProcObjectTimer(_Lich, "LLLICH_Timers_StartPhylacteryCreationDialog", 250);

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Lich, "LLLICH_Timers_StartPhylacteryCreationDialog")
AND
QRY_SpeakerIsAvailable(_Lich)
THEN
Proc_StartDialog(0, "LLLICH_CreatePhylactery", _Lich);

IF
DialogStarted("LLLICH_CreatePhylactery", _Instance)
AND
DialogGetInvolvedPlayer(_Instance, 1, (CHARACTERGUID)_Lich)
AND
DB_CurrentLevel(_Level)
THEN
PROC_LoopEffect("LLLICH_FX_Status_Regenerating_01", _Lich, "LLLICH.FX.SoulExtractorActive.Overlay", _Level, "");
PlayAnimation(_Lich, "skill_prepare_flight_01_start", "LLLICH_Animations_PlayFlightLoop");

IF
StoryEvent((CHARACTERGUID)_Lich, "LLLICH_Animations_PlayFlightLoop")
THEN
ObjectSetFlag(_Lich, "PlayAnim_skill_prepare_flight_01_loop");

PROC
LLLICH_Phylactery_StartPhylactoryCreationDialog((CHARACTERGUID)_Lich, 1)
THEN
Proc_StartDialog(1, "LLLICH_AD_PhylacteryAlreadyActive", _Lich);

IF
ObjectFlagSet("LLLICH_Phylactery_CreateAmulet", (CHARACTERGUID)_Lich, _)
THEN
ObjectClearFlag(_Lich, "LLLICH_Phylactery_CreateAmulet");
LLLICH_Phylactery_CreatePhylactery(_Lich, "LLLICH_Phylactery_Amulet", "LLLICH_Phylactery_Amulet_A_5d0c0bef-9071-4328-b72c-b58086b0f68d");

IF
ObjectFlagSet("LLLICH_Phylactery_CreateRing", (CHARACTERGUID)_Lich, _)
THEN
ObjectClearFlag(_Lich, "LLLICH_Phylactery_CreateRing");
LLLICH_Phylactery_CreatePhylactery(_Lich, "LLLICH_Phylactery_Ring", "LOOT_LLLICH_Phylactery_Ring_A_cd0b735f-6c57-43b5-8d12-131b725dda48");

IF
ObjectFlagSet("LLLICH_Phylactery_CreateSmallbox", (CHARACTERGUID)_Lich, _)
THEN
ObjectClearFlag(_Lich, "LLLICH_Phylactery_CreateSmallbox");
LeaderLog_Log("DEBUG", "[Lichdom:Phylactery:ObjectFlagSet] Flag [LLLICH_Phylactery_CreateSmallbox] was set.");
LLLICH_Phylactery_CreatePhylactery(_Lich, "LLLICH_Phylactery_Smallbox", "LOOT_LLLICH_Phylactery_Smallbox_A_73c01ec2-7894-4d19-b12f-991650263332");

/*
IF
ObjectFlagCleared("LLLICH_Phylactery_CreateSmallbox", (CHARACTERGUID)_Lich, _)
THEN
LeaderLog_Log("DEBUG", "[Lichdom:Phylactery:ObjectFlagCleared] Flag [LLLICH_Phylactery_CreateSmallbox] was cleared.");

IF
DialogStarted("LLLICH_CreatePhylactery", _Instance)
AND
DialogGetInvolvedPlayer(_Instance, 1, _Player)
AND
ObjectGetFlag(_Player, "LLLICH_Phylactery_CreateSmallbox", _Enabled)
THEN
LeaderLog_LogInt("DEBUG", "[Lichdom:Phylactery:DialogStarted] Flag [LLLICH_Phylactery_CreateSmallbox] equals [",_Enabled,"].");
*/

PROC
LLLICH_Phylactery_CreatePhylactery((CHARACTERGUID)_Lich, (STRING)_Flag, (STRING)_Template)
AND
GetPosition(_Lich, _x, _y, _z)
AND
CreateItemTemplateAtPosition(_Template, _x, _y, _z, _Phylactery)
THEN
ObjectSetFlag(_Lich, _Flag);
DB_LLLICH_Phylactery_Temp_PhylacteryCreated(_Lich, _Phylactery);
LLLICH_Phylactery_OnPhylacteryCreated(_Lich, _Phylactery);

PROC
LLLICH_Phylactery_CreatePhylactery((CHARACTERGUID)_Lich, (STRING)_Flag, (STRING)_Template)
AND
NOT DB_LLLICH_Phylactery_Temp_PhylacteryCreated(_Lich, _)
THEN
LeaderLog_Log("DEBUG", "[Lichdom:Phylactery:CreatePhylactery] [ERROR] No phylactery item created!");

PROC
LLLICH_Phylactery_CreatePhylactery((CHARACTERGUID)_Lich, (STRING)_Flag, (STRING)_Template)
AND
DB_LLLICH_Phylactery_Temp_PhylacteryCreated(_Lich, _Phylactery)
THEN
NOT DB_LLLICH_Phylactery_Temp_PhylacteryCreated(_Lich, _Phylactery);

PROC
LLLICH_Phylactery_OnPhylacteryCreated((CHARACTERGUID)_Lich, (ITEMGUID)_Phylactery)
AND
NOT ObjectGetFlag(_Lich, "LLLICH_Preset_GainedInitialSoulExtractor", 1)
THEN
ObjectSetFlag(_Lich, "LLLICH_Preset_GainedInitialSoulExtractor");

PROC
LLLICH_Phylactery_OnPhylacteryCreated((CHARACTERGUID)_Lich, (ITEMGUID)_Phylactery)
AND
//IsTagged(_Lich, "LLLICH_Lich", 0)
NOT LeaderLib_Helper_QRY_HasStatus(_Lich, "LLLICH_LICHFORM")
THEN
LLLich_Main_SetupLich(_Lich);

PROC
LLLICH_Phylactery_OnPhylacteryCreated((CHARACTERGUID)_Lich, (ITEMGUID)_Phylactery)
AND
GetPosition(_Lich, _x, _y, _z)
THEN
PlayEffectAtPosition("LLLICH_FX_Status_PhylactoryActive_Applied_01", _x, _y, _z);

PROC
LLLICH_Phylactery_OnPhylacteryCreated((CHARACTERGUID)_Lich, (ITEMGUID)_Phylactery)
THEN
ShowNotification(_Lich, "LLLICH_Notifications_Phylactery_Created");
ObjectSetFlag(_Lich, "LLLICH_PhylacteryActive");
ItemToInventory(_Phylactery, _Lich);
ItemSetOwner(_Phylactery, _Lich);
SetVarObject(_Lich, "LLLICH_Phylactery", _Phylactery);
SetVarObject(_Phylactery, "LLLICH_Phylactory_Owner", _Lich);
DB_LLLICH_Phylactery_Active(_Lich, _Phylactery, 1);
//ApplyStatus(_Lich, "LLLICH_PHYLACTERY_ACTIVE", -1.0, 1, _Lich);
SetStoryEvent(_Lich, "LLLICH_ApplyPhylacteryStatusInfluence");

IF
CharacterStatusRemoved(_Lich, "LLLICH_PHYLACTERY_ACTIVE", _)
THEN
CharacterSetImmortal(_Lich, 0);

IF
CharacterStatusApplied(_Lich, "LLLICH_PHYLACTERY_ACTIVE", _)
THEN
CharacterSetImmortal(_Lich, 1);

/*
IF
CharacterStatusRemoved(_Lich, "LLLICH_PHYLACTERY_ACTIVE", _)
AND
DB_LLLICH_Phylactery_Active(_Lich, _Phylactery, _Active)
AND
ObjectExists(_Phylactery, 1)
AND
CharacterIsDead(_Lich, 0)
AND
ItemIsDestroyed(_Phylactery, 0)
THEN
SetStoryEvent(_Lich, "LLLICH_ApplyPhylacteryStatusInfluence");
*/
//END_REGION

//REGION RESET
PROC
LLLich_Debug_ResetLich((CHARACTERGUID)_Lich)
AND
DB_LLLICH_Phylactery_Active(_Lich, _Phylactery, _Active)
AND
ObjectExists(_Phylactery, 1)
THEN
LeaderLog_Log("DEBUG", "[Lichdom:Debug:ResetLich] Destroying Phylactery and refunding Soul Extractor.");
NOT DB_LLLICH_Phylactery_Active(_Lich, _Phylactery, _Active);
ItemRemove(_Phylactery);
LLLich_Phylactery_OnPhylacteryDestroyed(_Lich, _Phylactery);
ItemTemplateAddTo("PUZ_LLLICH_PhylacteryCreator_A_71cb1886-a2fc-4f3a-acd6-886485fa9bee", _Lich, 1, 1);

PROC
LLLich_Debug_ResetLich((CHARACTERGUID)_Lich)
AND
DB_LLLICH_Phylactery_Active(_Lich, _Phylactery, _Active)
THEN
NOT DB_LLLICH_Phylactery_Active(_Lich, _Phylactery, _Active);
//END_REGION

//REGION EDITOR_WORKAROUNDS
IF
CharacterStatusRemoved(_Lich, "RESURRECT", _)
AND
DB_LLLICH_Phylactery_Active(_Lich, _Phylactery, 1)
THEN
ApplyStatus(_Lich, "LLLICH_PHYLACTERY_ACTIVE", -1.0, 1, _Lich);

IF
CharacterStatusApplied(_Lich, "LLLICH_PHYLACTERY_ACTIVE", _)
AND
NOT DB_LLLICH_Phylactery_Active(_Lich, _, 1)
THEN
SetStoryEvent(_Lich, "LLLICH_ClearPhylacteryStatusInfluence");
//END_REGION

//REGION DYING_EVENT
IF
StoryEvent((CHARACTERGUID)_Lich, "LLLICH_OnLichDying_RemoveHarmfulStatuses")
THEN
ApplyStatus(_Lich, "LLLICH_CLEAR_HARMFUL", 0.0);

IF
StoryEvent((CHARACTERGUID)_Lich, "LLLICH_OnLichDying")
AND
CharacterIsInCombat(_Lich, 1)
THEN
ObjectSetFlag(_Lich, "LLLICH_Recovering_WasInCombat", 0);

IF
StoryEvent((CHARACTERGUID)_Lich, "LLLICH_OnLichDying")
THEN
//Explode before teleporting
LLLICH_Phylactery_OnLichDying_TriggerUnstable(_Lich);
//Teleport first before reducing souls.
LLLICH_Phylactery_OnLichDying_Teleport(_Lich);
LLLICH_Phylactery_ReducePower(_Lich);

//Only explode if the Lich isn't actually going to die
PROC
LLLICH_Phylactery_OnLichDying_TriggerUnstable((CHARACTERGUID)_Lich)
AND
DB_LLLICH_Phylactery_Active(_Lich, _Phylactery, 1)
AND
CharacterHasTalent(_Lich, "Unstable", 1)
THEN
SetStoryEvent(_Lich, "LLLICH_CreateUnstableExplosion");

PROC
LLLICH_Phylactery_OnLichDying_Teleport((CHARACTERGUID)_Lich)
AND
DB_LLLICH_Phylactery_Active(_Lich, _Phylactery, 1)
AND
ObjectExists(_Phylactery, 1)
THEN
CharacterFlushQueue(_Lich);
LLLICH_Phylactery_Teleport(_Lich, _Phylactery, "LLLICH_Phylactory_Regenerating_LichTeleported");

//Phylactery is broken! Uh oh!
PROC
LLLICH_Phylactery_OnLichDying_Teleport((CHARACTERGUID)_Lich)
AND
DB_LLLICH_Phylactery_Active(_Lich, _Phylactery, 0)
THEN
CharacterStatusText(_Lich, "LLLICH_StatusText_ActuallyDying");
//END_REGION

//REGION TELEPORT_PHYLACTERY

//Phylactery in the world
PROC
LLLICH_Phylactery_Teleport((CHARACTERGUID)_Lich, (ITEMGUID)_Phylactery, (STRING)_TeleportEvent)
AND
NOT DB_LLLICH_Phylactery_Temp_TeleportResolved(_Lich)
AND
ItemIsInInventory(_Phylactery, 0)
AND
GetPosition(_Phylactery, _x, _y, _z)
AND
FindValidPosition(_x, _y, _z, 12.0, _Lich, _tx, _ty, _tz)
THEN
DB_LLLICH_Phylactery_Temp_TeleportResolved(_Lich);
PlayEffect(_Phylactery, "RS3_FX_Skills_Soul_Cast_Shout_Root_02");
//TeleportTo(_Lich, _Phylactery, _TeleportEvent, 0, 1, 1);
TeleportToPosition(_Lich, _tx, _ty, _tz, _TeleportEvent, 0, 1);
//CharacterRemoveTension(_Lich);
LeaveCombat(_Lich);

/*
Phylactery in an inventory other than the Lich's.
If the phylactery is in the Lich's inventory, LLLICH_Phylactery.gameScript handles regenerating where they stand.
*/
PROC
LLLICH_Phylactery_Teleport((CHARACTERGUID)_Lich, (ITEMGUID)_Phylactery, (STRING)_TeleportEvent)
AND
NOT DB_LLLICH_Phylactery_Temp_TeleportResolved(_Lich)
AND
ItemIsInInventory(_Phylactery, 1)
AND
GetInventoryOwner(_Phylactery, _Owner)
AND
_Owner != _Lich
AND
ObjectExists(_Owner, 1)
AND
GetPosition(_Owner, _x, _y, _z)
AND
FindValidPosition(_x, _y, _z, 12.0, _Lich, _tx, _ty, _tz)
THEN
DB_LLLICH_Phylactery_Temp_TeleportResolved(_Lich);
TeleportToPosition(_Lich, _tx, _ty, _tz, _TeleportEvent, 0, 1);
LeaveCombat(_Lich);

/*
IF
CharacterStatusRemoved(_Lich, "LLLICH_RECOVERING", _)
THEN
PROC_StopLoopBeamEffect(_Lich, "LLLICH.FX.PhylacteryBeam");
*/

QRY
LLLICH_Phylactery_QRY_WaypointDistanceIsLess((CHARACTERGUID)_Lich, (REAL)_Dist)
AND
NOT DB_LLLICH_Phylactery_Temp_LastWaypointDist(_Lich, _, _)
THEN
DB_NOOP(1);

QRY
LLLICH_Phylactery_QRY_WaypointDistanceIsLess((CHARACTERGUID)_Lich, (REAL)_Dist)
AND
DB_LLLICH_Phylactery_Temp_LastWaypointDist(_Lich, _LastDist, _LastWaypointItem)
AND
_Dist < _LastDist
THEN
NOT DB_LLLICH_Phylactery_Temp_LastWaypointDist(_Lich, _LastDist, _LastWaypointItem);

QRY
LLLICH_Phylactery_QRY_IsInHarmfulSurface((CHARACTERGUID)_Lich, (ITEMGUID)_Phylactery)
AND
GetSurfaceGroundAt(_Lich, "SurfaceLava")
THEN
DB_NOOP(1);

QRY
LLLICH_Phylactery_QRY_IsInHarmfulSurface((CHARACTERGUID)_Lich, (ITEMGUID)_Phylactery)
AND
ObjectExists(_Phylactery, 1)
AND
ItemIsInInventory(_Phylactery, 0)
AND
GetSurfaceGroundAt(_Phylactery, "SurfaceLava")
THEN
DB_NOOP(1);

//Waypoint fallback
//Avoid continually regenerating in lava
PROC
LLLICH_Phylactery_Teleport((CHARACTERGUID)_Lich, (ITEMGUID)_Phylactery, (STRING)_TeleportEvent)
AND
NOT DB_LLLICH_Phylactery_Temp_TeleportResolved(_Lich)
AND
LLLICH_Phylactery_QRY_IsInHarmfulSurface(_Lich, _Phylactery)
AND
CharacterCanUseWaypoints(_Lich, 1)
AND
DB_WaypointUnlocked(_WaypointID, _Lich)
AND
DB_WaypointInfo(_WaypointItem, _Trigger, _WaypointID)
AND
GetDistanceTo(_Lich, _WaypointItem, _Dist)
AND
LLLICH_Phylactery_QRY_WaypointDistanceIsLess(_Lich, _Dist)
THEN
DB_LLLICH_Phylactery_Temp_LastWaypointDist(_Lich, _Dist, _WaypointItem);

PROC
LLLICH_Phylactery_Teleport((CHARACTERGUID)_Lich, (ITEMGUID)_Phylactery, (STRING)_TeleportEvent)
AND
DB_LLLICH_Phylactery_Temp_LastWaypointDist(_Lich, _Dist, _WaypointItem)
THEN
NOT DB_LLLICH_Phylactery_Temp_LastWaypointDist(_Lich, _Dist, _WaypointItem);
DB_LLLICH_Phylactery_Temp_TeleportResolved(_Lich);
TeleportTo(_Lich, _WaypointItem, _TeleportEvent, 0, 1, 1);
ShowNotification(_Lich, "LLLICH_Notifications_Phylactery_TeleportedToWaypoint");
LeaveCombat(_Lich);

//Recall Failed - Phylactery in inventory
PROC
LLLICH_Phylactery_Teleport((CHARACTERGUID)_Lich, (ITEMGUID)_Phylactery, "LLLICH_Phylactery_PlayerReturned")
AND
NOT DB_LLLICH_Phylactery_Temp_TeleportResolved(_Lich)
AND
ItemIsInCharacterInventory(_Phylactery, _Lich, 1)
THEN
ShowNotification(_Lich, "LLLICH_Notifications_Phylactery_TeleportFailed_InInventory");

PROC
LLLICH_Phylactery_Teleport((CHARACTERGUID)_Lich, (ITEMGUID)_Phylactery, (STRING)_TeleportEvent)
AND
NOT DB_LLLICH_Phylactery_Temp_TeleportResolved(_Lich)
THEN
SetStoryEvent(_Lich, _TeleportEvent);

PROC
LLLICH_Phylactery_Teleport((CHARACTERGUID)_Lich, (ITEMGUID)_Phylactery, (STRING)_TeleportEvent)
AND
DB_LLLICH_Phylactery_Temp_TeleportResolved(_Lich)
THEN
NOT DB_LLLICH_Phylactery_Temp_TeleportResolved(_Lich);
//END_REGION

//REGION PHYLACTERY_CHARGE_REDUCTION

IF
TextEventSet("lichdom_hardcore")
AND
IsHardcoreMode(_Hardcore)
THEN
LeaderLog_LogInt("DEBUG", "[Lichdom:Phylactery:lichdom_hardcore] Hardcore mode is: [",_Hardcore,"]");

PROC
LLLICH_Phylactery_ReducePower((CHARACTERGUID)_Lich)
AND
DB_LLLICH_Phylactery_Active(_Lich, _Phylactery, 1)
AND
ItemGetCharges(_Phylactery, _CurrentPower)
AND
IsHardcoreMode(_Hardcore)
AND
DB_LLLICH_Phylactery_DamageOnDeath(_Hardcore, _Damage)
AND
IntegerSum(_CurrentPower, _Damage, _NextPower)
AND
LeaderLog_QRY_LogInt("DEBUG", "[Lichdom:Phylactery:OnLichDying:ReduceCharges] Removing [",_Damage,"] charge(s) from the Phylactery. Hardcore Mode: [",_Hardcore,"]")
AND
IntegerMax(0, _NextPower, _CappedPower)
AND
NOT LLLICH_Phylactery_QRY_PhylacteryIsBroken(_Lich, _Phylactery, _CappedPower)
THEN
ItemAddCharges(_Phylactery, _Damage);
LeaderLog_LogInt("DEBUG", "[Lichdom:Phylactery:OnLichDying:ReduceCharges] Phylactery lost power. Power: [",_CappedPower,"]");
ShowNotification(_Lich, "LLLICH_Notifications_Phylactery_Damage");

PROC
LLLICH_Phylactery_ReducePower((CHARACTERGUID)_Lich, (INTEGER)_RemoveCharges)
AND
_RemoveCharges > 0
AND
IntegerProduct(_RemoveCharges, -1, _ReduceCharges)
THEN
LLLICH_Phylactery_ReducePower(_Lich, _ReduceCharges);

PROC
LLLICH_Phylactery_ReducePower((CHARACTERGUID)_Lich, (INTEGER)_RemoveCharges)
AND
_RemoveCharges < 0
AND
DB_LLLICH_Phylactery_Active(_Lich, _Phylactery, 1)
AND
ItemGetCharges(_Phylactery, _CurrentPower)
AND
IntegerSum(_CurrentPower, _RemoveCharges, _NextPower)
AND
LeaderLog_QRY_LogInt("DEBUG", "[Lichdom:Phylactery:OnLichDying:ReduceCharges] Removing [",_RemoveCharges,"] charge(s) from the Phylactery.")
AND
IntegerMax(0, _NextPower, _CappedPower)
AND
NOT LLLICH_Phylactery_QRY_PhylacteryIsBroken(_Lich, _Phylactery, _CappedPower)
THEN
ItemAddCharges(_Phylactery, _RemoveCharges);
ShowNotification(_Lich, "LLLICH_Notifications_Phylactery_Damage");
//END_REGION

//REGION FEEDING_SOULS
PROC
LLLICH_Phylactery_FeedSouls((CHARACTERGUID)_Lich, (ITEMGUID)_Phylactery)
AND
ObjectExists(_Phylactery, 1)
THEN
ItemAddCharges(_Phylactery, 1);
LLLICH_Phylactery_OnSoulsAdded(_Lich, _Phylactery);
//LeaderLog_LogTarget("STATUS", _Lich, "<font color='#80FFC3'>Restored 1 Power</font>");

PROC
LLLICH_Phylactery_OnSoulsAdded((CHARACTERGUID)_Lich, (ITEMGUID)_Phylactery)
AND
ItemIsInInventory(_Phylactery, 0)
THEN
SetStoryEvent(_Phylactery, "LLLICH_Phylactery_ReceivedSouls");

PROC
LLLICH_Phylactery_OnSoulsAdded((CHARACTERGUID)_Lich, (ITEMGUID)_Phylactery)
AND
ItemGetCharges(_Phylactery, _Power)
AND
ItemGetMaxCharges(_Phylactery, _Max)
THEN
LLLICH_Phylactery_DisplaySoulNotification(_Lich, _Phylactery, _Power, _Max);

PROC
LLLICH_Phylactery_DisplaySoulNotification((CHARACTERGUID)_Lich, (ITEMGUID)_Phylactery, (INTEGER)_Power, (INTEGER)_Max)
AND
_Power >= _Max
THEN
ShowNotification(_Lich, "LLLICH_Notifications_Phylactery_FullPower");

PROC
LLLICH_Phylactery_DisplaySoulNotification((CHARACTERGUID)_Lich, (ITEMGUID)_Phylactery, (INTEGER)_Power, (INTEGER)_Max)
AND
_Power < _Max
THEN
ShowNotification(_Lich, "LLLICH_Notifications_Phylactery_Healed");
/*
PROC
LLLICH_Phylactery_FeedSouls((CHARACTERGUID)_Lich, (ITEMGUID)_Phylactery)
AND
ObjectExists(_Phylactery, 1)
AND
IsHardcoreMode(_Hardcore)
AND
IntegerSubtract(1, _Hardcore, _Index)
AND
DB_LLLICH_Phylactery_DamageOnDeath(_Index, _Souls)
AND
IntegerProduct(_Souls, -1, _AddSouls)
AND
IntegertoString(_AddSouls, _AddSoulsStr)
THEN
ItemAddCharges(_Phylactery, _AddSouls);
LeaderLog_LogTarget("STATUS", _Lich, "<font color='#80FFC3'>Restored ",_AddSoulsStr, " Power</font>");
*/

PROC
LLLICH_Phylactery_FeedSouls((CHARACTERGUID)_Lich, (ITEMGUID)_Phylactery)
AND
DB_LLLICH_Phylactery_Active(_Lich, _Phylactery, 0)
AND
ObjectExists(_Phylactery, 1)
AND
ItemIsDestroyed(_Phylactery, 0)
AND
ItemGetCharges(_Phylactery, _Power)
AND
ItemGetMaxCharges(_Phylactery, _Max)
AND
_Power >= _Max
THEN
LLLICH_Phylactery_Restore(_Lich, _Phylactery);

PROC
LLLICH_Phylactery_Restore((CHARACTERGUID)_Lich, (ITEMGUID)_Phylactery)
AND
DB_LLLICH_Phylactery_PreviousTemplate(_Phylactery, _Template)
AND
DB_LLLICH_Phylactery_Active(_Lich, _Phylactery, 0)
THEN
NOT DB_LLLICH_Phylactery_Active(_Lich, _Phylactery, 0);
NOT DB_LLLICH_Phylactery_PreviousTemplate(_Phylactery, _Template);
DB_LLLICH_Phylactery_Active(_Lich, _Phylactery, 1);
Transform(_Phylactery, _Template, 1, 1, 1);
SetVarObject(_Lich, "LLLICH_Phylactery", _Phylactery);
SetVarObject(_Phylactery, "LLLICH_Phylactory_Owner", _Lich);
ObjectSetFlag(_Lich, "LLLICH_PhylacteryActive", 0);
SetStoryEvent(_Lich, "LLLICH_ApplyPhylacteryStatusInfluence");
ShowNotification(_Lich, "LLLICH_Notifications_Phylactery_Restored");
//END_REGION

//REGION PHYLACTERY_BROKEN
IF
CharacterDestroyedItem(_Attacker, _Phylactery)
AND
DB_LLLICH_Phylactery_Active(_Lich, _Phylactery, 1)
THEN
LLLICH_Phylactery_Break(_Phylactery);

PROC
LLLICH_Phylactery_Destroy((ITEMGUID)_Phylactery)
AND
DB_LLLICH_Phylactery_Active(_Lich, _Phylactery, _Active)
THEN
NOT DB_LLLICH_Phylactery_Active(_Lich, _Phylactery, _Active);
ItemRemove(_Phylactery);
LLLich_Phylactery_OnPhylacteryDestroyed(_Lich, _Phylactery);

PROC
LLLich_Phylactery_OnPhylacteryDestroyed((CHARACTERGUID)_Lich, (ITEMGUID)_Phylactery)
AND
DB_LLLICH_Phylactery_PreviousTemplate(_Phylactery, _PreviousTemplate)
THEN
NOT DB_LLLICH_Phylactery_PreviousTemplate(_Phylactery, _PreviousTemplate);

PROC
LLLich_Phylactery_OnPhylacteryDestroyed((CHARACTERGUID)_Lich, (ITEMGUID)_Phylactery)
THEN
LeaderLog_Log("DEBUG", "[Lichdom:Phylactery:OnPhylacteryDestroyed] Phylactery was destroyed.");
ShowNotification(_Lich, "LLLICH_Notifications_Phylactery_Destroyed");
LLLich_Phylactery_ClearPhylacteryVariables(_Lich);
SetStoryEvent(_Lich, "LLLICH_OnPhylacteryDestroyed");

PROC
LLLich_Phylactery_ClearPhylacteryVariables((CHARACTERGUID)_Lich)
THEN
LeaderLog_Log("DEBUG", "[Lichdom:Phylactery:ClearPhylacteryVariables] Clearing vars, flags, and statuses.");
LLLICH_Phylactery_ClearFlags(_Lich);
ClearVarObject(_Lich, "LLLICH_Phylactery");
SetStoryEvent(_Lich, "LLLICH_ClearPhylacteryStatusInfluence");
RemoveStatus(_Lich, "LLLICH_PHYLACTERY_ACTIVE");

PROC
LLLICH_Phylactery_Break((ITEMGUID)_Phylactery)
AND
DB_LLLICH_Phylactery_Active(_Lich, _Phylactery, 1)
THEN
LLLich_Phylactery_OnPhylacteryBroken(_Lich, _Phylactery);

PROC
LLLich_Phylactery_OnPhylacteryBroken((CHARACTERGUID)_Lich, (ITEMGUID)_Phylactery)
AND
IsTagged(_Phylactery, "LLLICH_BlockEquip", 0)
THEN
CharacterUnequipItem(_Lich, _Phylactery);

PROC
LLLich_Phylactery_OnPhylacteryBroken((CHARACTERGUID)_Lich, (ITEMGUID)_Phylactery)
AND
GetTemplate(_Phylactery, _PreviousTemplate)
AND
LLLICH_Phylactery_QRY_CheckSoulLevel(_Lich, _Phylactery)
AND
GetVarInteger(_Lich, "LLLICH_SoulLevel", _SoulLevel)
AND
DB_LLLICH_Phylactery_Templates(0, _SoulLevel, _Tag, _TransformTemplate) // 0 = broken templates
AND
IsTagged(_Phylactery, _Tag, 1)
AND
DB_LLLICH_Phylactery_Active(_Lich, _Phylactery, 1)
THEN
NOT DB_LLLICH_Phylactery_Active(_Lich, _Phylactery, 1);
DB_LLLICH_Phylactery_PreviousTemplate(_Phylactery, _PreviousTemplate);
DB_LLLICH_Phylactery_Active(_Lich, _Phylactery, 0);
Transform(_Phylactery, _TransformTemplate, 1, 1, 1);

PROC
LLLich_Phylactery_OnPhylacteryBroken((CHARACTERGUID)_Lich, (ITEMGUID)_Phylactery)
THEN
LeaderLog_Log("DEBUG", "[Lichdom:Phylactery:OnPhylacteryBroken] Phylactery was broken and transformed.");
ShowNotification(_Lich, "LLLICH_Notifications_Phylactery_Broken");
ObjectClearFlag(_Lich, "LLLICH_PhylacteryActive");
SetStoryEvent(_Lich, "LLLICH_ClearPhylacteryStatusInfluence");
RemoveStatus(_Lich, "LLLICH_PHYLACTERY_ACTIVE");
SetStoryEvent(_Lich, "LLLICH_OnPhylacteryDestroyed");
//END_REGION

//REGION RECOVERING
//Jump to turn after recovering in combat
IF
CharacterStatusRemoved(_Lich, "LLLICH_RECOVERING", _)
AND
ObjectGetFlag(_Lich, "LLLICH_Recovering_WasInCombat", 1)
AND
NOT DB_GlobalFlag("LLLICH_Settings_DisableJumpToTurn_Recovering")
THEN
ObjectClearFlag(_Lich, "LLLICH_Recovering_WasInCombat", 0);
ProcObjectTimer(_Lich, "LLLICH_Timers_JumpToTurn", 500);

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Lich, "LLLICH_Timers_JumpToTurn")
AND
CharacterIsDead(_Lich, 0)
AND
CharacterIsInCombat(_Lich, 1)
THEN
JumpToTurn(_Lich);
//END_REGION

//REGION SMALLBOX_USED_BLOCK
PROC
LLLICH_Main_OnBlockedEquipping((CHARACTERGUID)_Lich, (ITEMGUID)_Item)
AND
IsTagged(_Item, "LLLICH_Phylactery", 1)
THEN
LLLICH_Phylactery_OnPhylacteryUsed(_Lich, _Item);

PROC
LLLICH_Phylactery_OnPhylacteryUsed((CHARACTERGUID)_Lich, (ITEMGUID)_Item)
AND
GetVarObject(_Lich, "LLLICH_Phylactery", (ITEMGUID)_Phylactery)
AND
_Item == _Phylactery
THEN
//CharacterDisplayTextWithParam(_Lich, "LLLICH_DisplayText_SmallBoxInspected_Owner", _Power);
LLLICH_Phylactery_DisplayPower(_Lich);

PROC
LLLICH_Phylactery_OnPhylacteryUsed((CHARACTERGUID)_Lich, (ITEMGUID)_Item)
AND
NOT GetVarObject(_Lich, "LLLICH_Phylactery", _Item)
THEN
DisplayText(_Lich, "LLLICH_DisplayText_SmallBoxInspected_Stranger");
//END_REGION

//REGION PLAYER_PHYLACTERY_TELEPORTING
QRY
LLLICH_Phylactery_QRY_PhylacteryIsStolen((CHARACTERGUID)_Lich, (ITEMGUID)_Phylactery)
AND
GetInventoryOwner(_Phylactery, _Owner)
AND
_Owner != _Lich
AND
CharacterIsPlayer((CHARACTERGUID)_Owner, 1)
AND
CharacterIsInPartyWith(_Lich, _Owner, 0)
AND
NOT CharacterGetOwner(_Owner, _Lich)
THEN
ShowNotification(_Lich, "LLLICH_Notifications_Phylactery_TeleportFailed_Stolen");

IF
SkillCast(_Lich, "Shout_LLLICH_Recall", _, _)
AND
DB_LLLICH_Phylactery_Active(_Lich, _Phylactery, 1)
AND
CharacterIsDead(_Lich, 0)
AND
NOT LLLICH_Phylactery_QRY_PhylacteryIsStolen(_Lich, _Phylactery)
THEN
ProcObjectTimer(_Lich, "LLLICH_Timers_TeleportToPhylactery", 500);

IF
SkillCast(_Lich, "Shout_LLLICH_Recall", _, _)
AND
DB_LLLICH_Phylactery_Active(_Lich, _Phylactery, 0)
AND
CharacterIsDead(_Lich, 0)
THEN
ShowNotification(_Lich, "LLLICH_Notifications_Phylactery_TeleportFailed_Broken");

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Lich, "LLLICH_Timers_TeleportToPhylactery")
AND
DB_LLLICH_Phylactery_Active(_Lich, _Phylactery, 1)
THEN
DB_LLLICH_Phylactery_Temp_TeleportingViaSkill(_Lich);
LLLICH_Phylactery_Teleport(_Lich, _Phylactery, "LLLICH_Phylactery_PlayerReturned");

IF
StoryEvent((CHARACTERGUID)_Lich, "LLLICH_Phylactery_PlayerReturned")
AND
DB_LLLICH_Phylactery_Temp_TeleportingViaSkill(_Lich)
THEN
NOT DB_LLLICH_Phylactery_Temp_TeleportingViaSkill(_Lich);
CharacterSetAnimationOverride(_Lich, "Teleport_In_01");
ProcObjectTimer(_Lich, "LLLICH_Timers_ClearAnimationOverride", 2100);

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Lich, "LLLICH_Timers_ClearAnimationOverride")
THEN
CharacterSetAnimationOverride(_Lich, "");
//END_REGION

//REGION DURABILITY_NOTIFICATIONS
IF
ObjectFlagSet("LLLICH_Commands_QueryPhylacteryPower", (CHARACTERGUID)_Lich, _)
THEN
ObjectClearFlag(_Lich, "LLLICH_Commands_QueryPhylacteryPower");
LLLICH_Phylactery_DisplayPower(_Lich);

PROC
LLLICH_Phylactery_DisplayPower((CHARACTERGUID)_Lich)
AND
DB_LLLICH_Phylactery_Active(_Lich, _Phylactery, 1)
AND
ObjectExists(_Phylactery, 1)
AND
ItemIsDestroyed(_Phylactery, 0)
AND
ItemGetCharges(_Phylactery, _Power)
AND
ItemGetMaxCharges(_Phylactery, _Max)
AND
IntegertoString(_Power, _PowerStr)
AND
IntegertoString(_Max, _MaxStr)
THEN
LeaderLog_LogTarget("NOTIFICATION", _Lich, "<font color='#73F6FF'>Your Phylactery has ",_PowerStr,"/",_MaxStr," Power</font>");

PROC
LLLICH_Phylactery_DisplayPower((CHARACTERGUID)_Lich)
AND
DB_LLLICH_Phylactery_Active(_Lich, _Phylactery, 0)
AND
ObjectExists(_Phylactery, 1)
AND
ItemIsDestroyed(_Phylactery, 0)
AND
ItemGetCharges(_Phylactery, _Power)
AND
ItemGetMaxCharges(_Phylactery, _Max)
AND
IntegerSubtract(_Max, _Power, _Remaining)
THEN
LLLICH_Phylactery_Internal_DisplayRequiredSouls(_Lich, _Remaining);

PROC
LLLICH_Phylactery_Internal_DisplayRequiredSouls((CHARACTERGUID)_Lich, (INTEGER)_Souls)
AND
IntegertoString(_Souls, _SoulsStr)
THEN
LeaderLog_LogTarget("NOTIFICATION", _Lich, "<font color='#73F6FF'>Your Phylactery Requires ",_SoulsStr," Souls to be Reactivated</font>");

PROC
LLLICH_Phylactery_Internal_DisplayRequiredSouls((CHARACTERGUID)_Lich, 1)
THEN
LeaderLog_LogTarget("NOTIFICATION", _Lich, "<font color='#73F6FF'>Your Phylactery Requires 1 Soul to be Reactivated</font>");
//END_REGION

//REGION CHAIN_LOOP_FX

//Delay the beam effect in case the player is teetering near the edge of the aura
IF
CharacterStatusApplied(_Lich, "LLLICH_PHYLACTERY_NEARLICH", (ITEMGUID)_Phylactery)
THEN
ProcObjectTimerCancel(_Lich, "LLLICH_Timers_StartPhylacteryBeamEffect");
ProcObjectTimer(_Lich, "LLLICH_Timers_StartPhylacteryBeamEffect", 250);

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Lich, "LLLICH_Timers_StartPhylacteryBeamEffect")
AND
HasActiveStatus(_Lich, "LLLICH_PHYLACTERY_NEARLICH", 1)
AND
HasActiveStatus(_Lich, "LLLICH_PHYLACTERY_ACTIVE_INFO", 1)
AND
DB_LLLICH_Phylactery_Active(_Lich, _Phylactery, 1)
AND
LLLICH_Phylactery_QRY_PhylacteryIsInWorld(_Phylactery)
AND
DB_CurrentLevel(_Level)
THEN
PROC_LoopBeamEffect("LLLICH_FX_Status_NearPhylactory_Beam_01", _Lich, _Phylactery, "Dummy_BodyFX", "", "LLLICH.FX.PhylacteryBeam", _Level);

PROC
LLLich_Phylactery_OnPhylacteryDestroyed((CHARACTERGUID)_Lich, (ITEMGUID)_Phylactery)
THEN
RemoveStatus(_Lich, "LLLICH_PHYLACTERY_NEARLICH");
ProcObjectTimerCancel(_Lich, "LLLICH_Timers_StartPhylacteryBeamEffect");
PROC_StopLoopBeamEffect(_Lich, "LLLICH.FX.PhylacteryBeam");

/*
IF
CharacterTeleportToWaypoint(_Lich, _)
AND
DB_LLLICH_Phylactery_Active(_Lich, _Phylactery, _Active)
AND
HasActiveStatus(_Lich, "LLLICH_PHYLACTERY_NEARLICH", 1)
AND
GetDistanceTo(_Lich, _Phylactery, _Dist)
AND
_Dist > 20
THEN
RemoveStatus(_Lich, "LLLICH_PHYLACTERY_NEARLICH");
*/

IF
CharacterStatusRemoved(_Lich, "LLLICH_PHYLACTERY_NEARLICH", _)
THEN
ProcObjectTimerCancel(_Lich, "LLLICH_Timers_StartPhylacteryBeamEffect");
PROC_StopLoopBeamEffect(_Lich, "LLLICH.FX.PhylacteryBeam");
//END_REGION

//REGION LEVEL_ENDING
IF
RegionEnded(_Level)
AND
DB_LLLICH_Phylactery_Active(_Lich, _Phylactery, _Active)
AND
ObjectExists(_Phylactery, _Exists)
AND
ItemIsInInventory(_Phylactery, _IsInInventory)
THEN
LLLICH_Phylactery_OnLevelEnded(_Lich, _Phylactery, _Exists, _IsInInventory);

PROC
LLLICH_Phylactery_OnLevelEnded((CHARACTERGUID)_Lich, (ITEMGUID)_Phylactery, 1, 0)
THEN
LeaderLog_Log("DEBUG", "[Lichdom:Phylactery:OnLevelEnded] Phylactery exists in the world. Moving phylactery to Lich.");
ItemToInventory(_Phylactery, _Lich);

//Phylactery is in a non-player inventory
PROC
LLLICH_Phylactery_OnLevelEnded((CHARACTERGUID)_Lich, (ITEMGUID)_Phylactery, 1, 1)
AND
GetInventoryOwner(_Phylactery, _Owner)
AND
_Owner != _Lich
AND
NOT DB_IsPlayer((CHARACTERGUID)_Owner)
THEN
LeaderLog_Log("DEBUG", "[Lichdom:Phylactery:OnLevelEnded] Phylactery not in a player inventory. Moving phylactery to Lich.");
ItemToInventory(_Phylactery, _Lich);

PROC
LLLICH_Phylactery_OnLevelEnded((CHARACTERGUID)_Lich, (ITEMGUID)_Phylactery, 0, (INTEGER)_IsInInventory)
AND
DB_LLLICH_Phylactery_Active(_Lich, _Phylactery, _Active)
THEN
NOT DB_LLLICH_Phylactery_Active(_Lich, _Phylactery, _Active);
LeaderLog_Log("DEBUG", "[Lichdom:Phylactery:OnLevelEnded] Phylactery does not exist. Removing from DB.");
//END_REGION

PROC
LLLICH_Phylactery_ClearFlags((CHARACTERGUID)_Lich)
THEN
LeaderLog_Log("DEBUG", "[Lichdom:Phylactery:ClearFlags] Clearing Phylactery flags.");
ObjectClearFlag(_Lich, "LLLICH_PhylacteryActive");
ObjectClearFlag(_Lich, "LLLICH_Phylactery_Amulet");
ObjectClearFlag(_Lich, "LLLICH_Phylactery_Ring");
ObjectClearFlag(_Lich, "LLLICH_Phylactery_Smallbox");

EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LaughingLeader_Lichdom"