Version 1
SubGoalCombiner SGC_AND
INITSECTION

KBSECTION

//REGION DRAIN_SOUL
IF
CharacterUsedSkillOnTarget(_Lich, (CHARACTERGUID)_Target, "Target_LLLICH_DrainSoul", _, _)
THEN
DB_LLLICH_Skills_Temp_ListenForDeath(_Lich, _Target, "Target_LLLICH_DrainSoul");
ProcObjectTimerCancel(_Lich, "LLLICH_Timers_CancelDyingEvent");
ProcObjectTimer(_Lich, "LLLICH_Timers_CancelDyingEvent", 5000);

IF
SkillCast(_Lich, "Target_LLLICH_DrainSoul", _, _)
AND
DB_LLLICH_Skills_Temp_ListenForDeath(_Lich, _Target, "Target_LLLICH_DrainSoul")
THEN
ProcObjectTimerCancel(_Lich, "LLLICH_Timers_CancelDyingEvent");
ProcObjectTimer(_Lich, "LLLICH_Timers_CancelDyingEvent", 3000);

PROC
ProcObjectTimerFinished((CHARACTERGUID)_Lich, "LLLICH_Timers_CancelDyingEvent")
AND
DB_LLLICH_Skills_Temp_ListenForDeath(_Lich, _Target, "Target_LLLICH_DrainSoul")
THEN
NOT DB_LLLICH_Skills_Temp_ListenForDeath(_Lich, _Target, "Target_LLLICH_DrainSoul");

IF
//CharacterStatusAttempt(_Target, "DYING", _)
CharacterPrecogDying(_Target)
AND
DB_LLLICH_Skills_Temp_ListenForDeath(_Lich, _Target, "Target_LLLICH_DrainSoul")
THEN
NOT DB_LLLICH_Skills_Temp_ListenForDeath(_Lich, _Target, "Target_LLLICH_DrainSoul");
ProcObjectTimerCancel(_Target, "LLLICH_Timers_CancelDyingEvent");
LLLICH_Skills_OnTargetDeath(_Lich, _Target, "Target_LLLICH_DrainSoul");
//END_REGION

//Bonus, in addition to the other two results
PROC
LLLICH_Skills_OnTargetDeath((CHARACTERGUID)_Lich, (CHARACTERGUID)_Target, "Target_LLLICH_DrainSoul")
AND
DB_LLLICH_Phylactery_Active(_Lich, _Phylactery)
AND
LLLICH_Phylactery_QRY_PhylacteryIsDamaged(_Lich, _Phylactery)
THEN
//ItemSetDurability(_Phylactery, _Durability);
ItemAddCharges(_Phylactery, 20);
LeaderLog_Log("DEBUG", "[Lichdom:Skills:OnTargetDeath] Target died from [Target_LLLICH_DrainSoul]. Regenerating Phylactery.");
ShowNotification(_Lich, "LLLICH_Notifications_Phylactery_Healed");
//LeaderLog_LogTarget("NOTIFICATION", _Lich, "<font color='#46B195'>You empowered your Phylactery. (", _DurabilityStr, "/100 Charges)</font>");

PROC
LLLICH_Skills_OnTargetDeath((CHARACTERGUID)_Lich, (CHARACTERGUID)_Target, "Target_LLLICH_DrainSoul")
AND
NOT DB_LLLICH_Skills_Temp_ListenForDeath_SkillResolved(_Lich, _Target, "Target_LLLICH_DrainSoul")
//AND
//HasActiveStatus(_Lich, "SOURCE_MUTED", 0)
AND
CharacterGetSourcePoints(_Lich, _SP)
AND
CharacterGetMaxSourcePoints(_Lich, _SPMax)
AND
_SP < _SPMax
THEN
LeaderLog_Log("DEBUG", "[Lichdom:Skills:OnTargetDeath] Target died from [Target_LLLICH_DrainSoul]. Applying [SOURCE_REPLENISH].");
DB_LLLICH_Skills_Temp_ListenForDeath_SkillResolved(_Lich, _Target, "Target_LLLICH_DrainSoul");
ApplyStatus(_Lich, "SOURCE_REPLENISH", 0.0, 1, _Lich);

//Source Explosion
PROC
LLLICH_Skills_OnTargetDeath((CHARACTERGUID)_Lich, (CHARACTERGUID)_Target, "Target_LLLICH_DrainSoul")
AND
NOT DB_LLLICH_Skills_Temp_ListenForDeath_SkillResolved(_Lich, _Target, "Target_LLLICH_DrainSoul")
THEN
LeaderLog_Log("DEBUG", "[Lichdom:Skills:OnTargetDeath] Target died from [Target_LLLICH_DrainSoul]. Causing source explosion.");
DB_LLLICH_Skills_Temp_ListenForDeath_SkillResolved(_Lich, _Target, "Target_LLLICH_DrainSoul");
CharacterCharacterSetEvent(_Lich, _Target, "LLLICH_Skills_CastDrainSoulExplosion");

PROC
LLLICH_Skills_OnTargetDeath((CHARACTERGUID)_Lich, (CHARACTERGUID)_Target, (STRING)_ID)
AND
DB_LLLICH_Skills_Temp_ListenForDeath_SkillResolved(_Lich, _Target, _ID)
THEN
NOT DB_LLLICH_Skills_Temp_ListenForDeath_SkillResolved(_Lich, _Target, _ID);

EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LaughingLeader_Lichdom"