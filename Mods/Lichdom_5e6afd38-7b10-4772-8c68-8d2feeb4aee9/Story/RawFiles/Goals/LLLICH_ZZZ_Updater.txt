Version 1
SubGoalCombiner SGC_AND
INITSECTION
LeaderUpdater_Register_Mod("Lichdom", "LaughingLeader", 1,0,1,0);
LeaderUpdater_Register_UUID("Lichdom", "LaughingLeader", 5e6afd38-7b10-4772-8c68-8d2feeb4aee9);
LeaderUpdater_Register_ActiveGoal("Lichdom", "LaughingLeader", "LLLICH_ZZZ_Updater");
LeaderUpdater_Register_Dependency("Lichdom", "LaughingLeader", "AnimationsPlus", "LaughingLeader", 1);
LeaderLib_Register_ModMenu("LaughingLeader.Lichdom", "[Lichdom] Settings", "LLLICH_SettingsMenu", "Lichdom", "LaughingLeader");
LeaderLib_PresetMenu_RegisterPreset("LLLICH_Lich", "Lich [Lichdom]", "Lichdom_IsActive");

KBSECTION
IF
GameStarted(_,_)
AND
LeaderUpdater_QRY_ModUpdateNeeded("Lichdom", "LaughingLeader", 1,0,1,0)
THEN
LeaderUpdater_Register_Mod("Lichdom", "LaughingLeader", 1,0,1,0);

/*
PROC
LeaderUpdater_ModUpdated("Lichdom", "LaughingLeader", (STRING)_OldVersion, "0.9.9.0")
AND
NOT DB_LeaderUpdater_Dependency("Lichdom", "LaughingLeader", "AnimationsPlus", "LaughingLeader", _)
THEN
LeaderUpdater_Register_Dependency("Lichdom", "LaughingLeader", "AnimationsPlus", "LaughingLeader", 1);
*/

//REGION UPDATES_OLD
//Permanent statuses become status influences instead
PROC
LeaderUpdater_ModUpdated("Lichdom", "LaughingLeader", (STRING)_PastVersion, (STRING)_NewVersion)
AND
LeaderLib_StringExt_QRY_VersionIsLessThan(_PastVersion, 0, 9, 1, 2)
AND
DB_IsPlayer(_Player)
AND
IsTagged(_Player, "LLLICH_Lich", 1)
THEN
LLLICH_Main_Internal_LichUpdate(_Player);

//_Actived added to Phylactery DB
LLLICH_Main_Debug_Update_MigrateDB();

LLLICH_Phylactery_Debug_StatsReload_ReplacePhylacteries_Start();

SysClear("DB_LLLICH_LichSkills", 1);
LLLICH_Main_Internal_UpdateLichSkills();

TimerCancel("LLLICH_Timers_Debug_RunPhylacterySanityCheck");
TimerLaunch("LLLICH_Timers_Debug_RunPhylacterySanityCheck", 500);

PROC
LeaderUpdater_ModUpdated("Lichdom", "LaughingLeader", (STRING)_PastVersion, (STRING)_NewVersion)
AND
LeaderLib_StringExt_QRY_VersionIsLessThan(_PastVersion, 0, 9, 5, 3)
AND
DB_IsPlayer(_Lich)
AND
IsTagged(_Lich, "LLLICH_Lich", 1)
THEN
SetStoryEvent(_Lich, "LLLICH_ApplyLichPenalty");

PROC
LeaderUpdater_ModUpdated("Lichdom", "LaughingLeader", (STRING)_PastVersion, (STRING)_NewVersion)
AND
LeaderLib_StringExt_QRY_VersionIsLessThan(_PastVersion, 0, 9, 5, 5)
AND
DB_LLLICH_Phylactery_Active(_Lich, _Phlyactery, 1)
THEN
ObjectSetFlag(_Lich, "LLLICH_PhylacteryActive", 0);

PROC
LeaderUpdater_ModUpdated("Lichdom", "LaughingLeader", (STRING)_PastVersion, (STRING)_NewVersion)
AND
LeaderLib_StringExt_QRY_VersionIsLessThan(_PastVersion, 0, 9, 5, 6)
THEN
LeaderLib_ToggleScripts_EnableScript("LeaderLib_TS_GrowthEvents_Item_Enabled", "Lichdom");

PROC
LeaderUpdater_ModUpdated("Lichdom", "LaughingLeader", (STRING)_PastVersion, (STRING)_NewVersion)
AND
LeaderLib_StringExt_QRY_VersionIsLessThan(_PastVersion, 0, 9, 5, 7)
AND
DB_IsPlayer(_Player)
AND
IsTagged(_Player, "LLLICH_Lich", 1)
THEN
InventoryLaunchTagIterator(_Player, "LLLICH_Phylactery", "", "LLLICH_Debug_CheckPhylacteryForOwner", "");

IF
StoryEvent((ITEMGUID)_Phylactery, "LLLICH_Debug_CheckPhylacteryForOwner")
AND
NOT DB_LLLICH_Phylactery_Active(_, _Phylactery, _)
THEN
ItemRemove(_Phylactery);

//This tag should be removed automatically when LLLICH_RECOVERING is removed
PROC
LeaderUpdater_ModUpdated("Lichdom", "LaughingLeader", (STRING)_PastVersion, (STRING)_NewVersion)
AND
LeaderLib_StringExt_QRY_VersionIsLessThan(_PastVersion, 0, 9, 5, 11)
AND
DB_IsPlayer(_Player)
AND
IsTagged(_Player, "LLLICH_Lich", 1)
AND
IsTagged(_Player, "AI_IGNORED_TARGET", 1)
AND
HasActiveStatus(_Player, "LLLICH_RECOVERING", 0)
THEN
ClearTag(_Player, "AI_IGNORED_TARGET");

PROC
LeaderUpdater_ModUpdated("Lichdom", "LaughingLeader", (STRING)_PastVersion, (STRING)_NewVersion)
AND
LeaderLib_StringExt_QRY_VersionIsLessThan(_PastVersion, 0, 9, 5, 11)
AND
DB_IsPlayer(_Player)
AND
IsTagged(_Player, "LLLICH_Lich", 1)
THEN
ApplyStatus(_Player, "LLLICH_LICHFORM_SCALED_BONUS", -1.0, 1, _Player);
//END_REGION

//REGION UPDATES_NEW
//New auto-upgrades
PROC
LeaderUpdater_ModUpdated("Lichdom", "LaughingLeader", (STRING)_PastVersion, (STRING)_NewVersion)
AND
LeaderLib_StringExt_QRY_VersionIsLessThan(_PastVersion, 0, 9, 6, 0)
THEN
LLLICH_LeaderLib_RegisterSettings();
LLLICH_Phylactery_InitSettings();

PROC
LeaderUpdater_ModUpdated("Lichdom", "LaughingLeader", (STRING)_PastVersion, (STRING)_NewVersion)
AND
LeaderLib_StringExt_QRY_VersionIsLessThan(_PastVersion, 0, 9, 6, 0)
AND
DB_LLLICH_Phylactery_Active(_Lich, _Phylactery, 1)
THEN
ProcObjectTimerCancel(_Lich, "LLLICH_Timers_Phylactery_CheckForUpgrade");
ProcObjectTimer(_Lich, "LLLICH_Timers_Phylactery_CheckForUpgrade", 500);
//END_REGION

EXITSECTION

ENDEXITSECTION
ParentTargetEdge "LaughingLeader_Lichdom"